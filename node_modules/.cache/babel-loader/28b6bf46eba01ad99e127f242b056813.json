{"ast":null,"code":"var _jsxFileName = \"C:\\\\Kaua-Lusvarghi\\\\Cursos-Programa\\xE7\\xE3o\\\\C\\xF3digo-Estudos\\\\Cursos_Programa\\xE7\\xE3o\\\\React\\\\React - Origamid\\\\Projeto-react-estudos\\\\appreact\\\\src\\\\Form\\\\Input.js\";\nimport React from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Input = _ref => {\n  let {\n    id,\n    label,\n    value,\n    setValue,\n    ...props\n  } = _ref;\n  // invés de ficar passando o restante das prorpiedades um por um, podemos usar o rest operator e passar o restante\n  // recebendo as propriedades como parametro e desestruturando elas\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n      htmlFor: id,\n      children: label\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 7,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      name: id,\n      id: id // poderia tirar o velue lá nas propriedades passadas e deixar apenas em '...props' e exe\n      ,\n      value: value,\n      onChange: _ref2 => {\n        let {\n          target\n        } = _ref2;\n        return setValue(target.value);\n      },\n      ...props\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 8,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_c = Input;\nexport default Input;\n\nvar _c;\n\n$RefreshReg$(_c, \"Input\");","map":{"version":3,"names":["React","Input","id","label","value","setValue","props","target"],"sources":["C:/Kaua-Lusvarghi/Cursos-Programação/Código-Estudos/Cursos_Programação/React/React - Origamid/Projeto-react-estudos/appreact/src/Form/Input.js"],"sourcesContent":["import React from 'react';\r\n\r\nconst Input = ({ id, label, value, setValue, ...props }) => { // invés de ficar passando o restante das prorpiedades um por um, podemos usar o rest operator e passar o restante\r\n  // recebendo as propriedades como parametro e desestruturando elas\r\n  return (\r\n    <>\r\n      <label htmlFor={id}>{label}</label>\r\n      <input\r\n        type=\"text\"\r\n        name={id}\r\n        id={id}\r\n        // poderia tirar o velue lá nas propriedades passadas e deixar apenas em '...props' e exe\r\n        value={value}\r\n        onChange={({ target }) => setValue(target.value)}\r\n        {...props} // e na hora de se utilizar podemos passar apenas assim, que só será aplicado as propriedades para os inputs que tiverem lá no 'app.js'\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Input;\r\n"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;;;;AAEA,MAAMC,KAAK,GAAG,QAA8C;EAAA,IAA7C;IAAEC,EAAF;IAAMC,KAAN;IAAaC,KAAb;IAAoBC,QAApB;IAA8B,GAAGC;EAAjC,CAA6C;EAAE;EAC5D;EACA,oBACE;IAAA,wBACE;MAAO,OAAO,EAAEJ,EAAhB;MAAA,UAAqBC;IAArB;MAAA;MAAA;MAAA;IAAA,QADF,eAEE;MACE,IAAI,EAAC,MADP;MAEE,IAAI,EAAED,EAFR;MAGE,EAAE,EAAEA,EAHN,CAIE;MAJF;MAKE,KAAK,EAAEE,KALT;MAME,QAAQ,EAAE;QAAA,IAAC;UAAEG;QAAF,CAAD;QAAA,OAAgBF,QAAQ,CAACE,MAAM,CAACH,KAAR,CAAxB;MAAA,CANZ;MAAA,GAOME;IAPN;MAAA;MAAA;MAAA;IAAA,QAFF;EAAA,gBADF;AAcD,CAhBD;;KAAML,K;AAkBN,eAAeA,KAAf"},"metadata":{},"sourceType":"module"}