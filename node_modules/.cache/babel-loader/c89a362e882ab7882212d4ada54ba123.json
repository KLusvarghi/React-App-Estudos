{"ast":null,"code":"var _jsxFileName = \"C:\\\\Kaua-Lusvarghi\\\\Cursos-Programa\\xE7\\xE3o\\\\C\\xF3digo-Estudos\\\\Cursos_Programa\\xE7\\xE3o\\\\React\\\\React - Origamid\\\\Projeto-react-estudos\\\\appreact\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst formFields = [{\n  id: 'nome',\n  label: 'Nome',\n  type: 'text'\n}, {\n  id: 'email',\n  label: 'Email',\n  type: 'email'\n}, {\n  id: 'senha',\n  label: 'Senha',\n  type: 'password'\n}, {\n  id: 'cep',\n  label: 'CEP',\n  type: 'text'\n}, {\n  id: 'rua',\n  label: 'Rua',\n  type: 'text'\n}, {\n  id: 'numero',\n  label: 'Numero',\n  type: 'text'\n}, {\n  id: 'bairro',\n  label: 'Bairro',\n  type: 'text'\n}, {\n  id: 'cidade',\n  label: 'Cidade',\n  type: 'text'\n}, {\n  id: 'estado',\n  label: 'Estado',\n  type: 'text'\n}];\n\nconst App = () => {\n  _s();\n\n  // nome, email, senha, cep, rua, numero, bairro, cidade e estado\n  const [form, setForm] = React.useState( // para evitar arredondamento de dados, podemos utilizar a array de objetos acima, porem precisamos tranformar uma essa array de objetos em uma array. E com o reduce podemso tanto retornar uma nova array quando um novo objeto, string ou um número\n  formFields.reduce((prev, atual) => {\n    // recebendo dois valores, o anterior e o atual\n    console.log(prev);\n    return { ...prev,\n      [atual.id]: '' // sendo a mesma coisa que \"email: ''\"\n\n    };\n  }, {}) // fazendo isso o valor inicial será um obj vazio\n  );\n  const [status, setStatus] = React.useState(null);\n\n  function handleSubmit(e) {\n    e.preventDefault(); // previnindo o evento padrão para que ele não atualize a página\n\n    fetch('https://ranekapi.origamid.dev/json/api/usuario', {\n      // quando eu quero fazer um post eu tenho que passar as opções, sendo elas em forma de objeto\n      method: 'POST',\n      // sendo o metodo 'get' padrão,\n      headers: {\n        // todos os cabeçalhos que quiser passar\n        // para essa api o principal header que precisamos é o content\n        // sendo uma aplicação do tipo json\n        'Content-Type': 'application/json' // por ser duas palavras separados por um '-', tem que se usar aspas simples\n\n      },\n      // sendo o body o corpo desse meu post\n      // porem ele só aceita string, e o nosso 'form' é uma array de objetos\n      body: JSON.stringify(form) // tendo que fazer essa conversão utiliozando o 'JSON.stringfy()'\n\n    }).then(response => {\n      // console.log(response)\n      setStatus(response);\n    }); // sendo uma API que requer todos os dados para que dê certo e aceitará apenas emails distintos\n  }\n\n  function handleChange(_ref) {\n    let {\n      target\n    } = _ref;\n    // desestruturando o 'event' e pegando apenas o que irei utilizar que é o 'target\n    const {\n      id,\n      value\n    } = target; // desestruturando o target e pegando o 'id' e o 'value'\n    // console.log(id, value);\n\n    setForm({ ...form,\n      [id]: value\n    }); // passanod priemiro os valores antigos para ele não passar por cima\n    // [id]: value ===> essa parte é a mesma coisa que [\"email\"]: kaua@gmail.com\n    // caso não passe o 'id' entre [], ele não irá torar um itme reativo, ai só com os colchetes ele tranforma a variavel \"id\" como propriedade\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [formFields.map(_ref2 => {\n        let {\n          id,\n          label,\n          type\n        } = _ref2;\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [' ', /*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: id,\n            children: label\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 104,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: type,\n            id: id,\n            value: form[id] // sendo a mesma coisa que form[\"nome\"]\n            ,\n            onChange: handleChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 105,\n            columnNumber: 13\n          }, this)]\n        }, id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 11\n        }, this);\n      }), status && status.ok && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Formul\\xE1rio enviado com sucesso!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 33\n      }, this), ' ', /*#__PURE__*/_jsxDEV(\"button\", {\n        children: \"Enviar\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n};\n\n_s(App, \"wGkc44bjWnSKJi8DPYGBQqocaD4=\");\n\n_c = App;\nexport default App; // Faça um fetch (POST) para a API abaixo\n// Para a criação ser aceita é necessário enviar dodos de:\n// nome, email, senha, cep, rua, numero, bairro, cidade e estado\n// Essa é a função utilizado para realizar o POST\n// fetch('https://ranekapi.origamid.dev/json/api/usuario', {\n//   method: 'POST',\n//   headers: {\n//     'Content-Type': 'application/json',\n//   },\n//   // form é o objeto com os dados do formulário\n//   body: JSON.stringify(form),\n// });\n// // Mostre uma mensagem na tela, caso a resposta da API seja positiva\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","formFields","id","label","type","App","form","setForm","useState","reduce","prev","atual","console","log","status","setStatus","handleSubmit","e","preventDefault","fetch","method","headers","body","JSON","stringify","then","response","handleChange","target","value","map","ok"],"sources":["C:/Kaua-Lusvarghi/Cursos-Programação/Código-Estudos/Cursos_Programação/React/React - Origamid/Projeto-react-estudos/appreact/src/App.js"],"sourcesContent":["import React from 'react';\n\nconst formFields = [\n  {\n    id: 'nome',\n    label: 'Nome',\n    type: 'text',\n  },\n  {\n    id: 'email',\n    label: 'Email',\n    type: 'email',\n  },\n  {\n    id: 'senha',\n    label: 'Senha',\n    type: 'password',\n  },\n  {\n    id: 'cep',\n    label: 'CEP',\n    type: 'text',\n  },\n  {\n    id: 'rua',\n    label: 'Rua',\n    type: 'text',\n  },\n  {\n    id: 'numero',\n    label: 'Numero',\n    type: 'text',\n  },\n  {\n    id: 'bairro',\n    label: 'Bairro',\n    type: 'text',\n  },\n  {\n    id: 'cidade',\n    label: 'Cidade',\n    type: 'text',\n  },\n  {\n    id: 'estado',\n    label: 'Estado',\n    type: 'text',\n  },\n];\n\nconst App = () => {\n  // nome, email, senha, cep, rua, numero, bairro, cidade e estado\n  const [form, setForm] = React.useState(\n    // para evitar arredondamento de dados, podemos utilizar a array de objetos acima, porem precisamos tranformar uma essa array de objetos em uma array. E com o reduce podemso tanto retornar uma nova array quando um novo objeto, string ou um número\n    formFields.reduce((prev, atual) => {\n      // recebendo dois valores, o anterior e o atual\n      console.log(prev);\n      return {\n        ...prev,\n        [atual.id]: '', // sendo a mesma coisa que \"email: ''\"\n      };\n    }, {}), // fazendo isso o valor inicial será um obj vazio\n  );\n  const [status, setStatus] = React.useState(null);\n\n  function handleSubmit(e) {\n    e.preventDefault(); // previnindo o evento padrão para que ele não atualize a página\n    fetch('https://ranekapi.origamid.dev/json/api/usuario', {\n      // quando eu quero fazer um post eu tenho que passar as opções, sendo elas em forma de objeto\n      method: 'POST', // sendo o metodo 'get' padrão,\n      headers: {\n        // todos os cabeçalhos que quiser passar\n        // para essa api o principal header que precisamos é o content\n        // sendo uma aplicação do tipo json\n        'Content-Type': 'application/json', // por ser duas palavras separados por um '-', tem que se usar aspas simples\n      },\n      // sendo o body o corpo desse meu post\n      // porem ele só aceita string, e o nosso 'form' é uma array de objetos\n      body: JSON.stringify(form), // tendo que fazer essa conversão utiliozando o 'JSON.stringfy()'\n    }).then((response) => {\n      // console.log(response)\n      setStatus(response);\n    });\n    // sendo uma API que requer todos os dados para que dê certo e aceitará apenas emails distintos\n  }\n\n  function handleChange({ target }) {\n    // desestruturando o 'event' e pegando apenas o que irei utilizar que é o 'target\n    const { id, value } = target; // desestruturando o target e pegando o 'id' e o 'value'\n    // console.log(id, value);\n\n    setForm({ ...form, [id]: value }); // passanod priemiro os valores antigos para ele não passar por cima\n    // [id]: value ===> essa parte é a mesma coisa que [\"email\"]: kaua@gmail.com\n    // caso não passe o 'id' entre [], ele não irá torar um itme reativo, ai só com os colchetes ele tranforma a variavel \"id\" como propriedade\n  }\n\n  return (\n    <>\n      <form onSubmit={handleSubmit}>\n        {formFields.map(({ id, label, type }) => (\n          <div key={id}>\n            {' '}\n            {/* Sempre que retorna uma lista de itens tem que definir uma KEY */}\n            <label htmlFor={id}>{label}</label>\n            <input\n              type={type}\n              id={id}\n              value={form[id]} // sendo a mesma coisa que form[\"nome\"]\n              onChange={handleChange}\n            />\n          </div>\n        ))}\n        {status && status.ok && <p>Formulário enviado com sucesso!</p>}{' '}\n        {/* Primeiro ele verifica se o status é positivo, depois verifica se o status de 'status' é true */}\n        <button>Enviar</button>\n      </form>\n    </>\n  );\n};\n\nexport default App;\n\n// Faça um fetch (POST) para a API abaixo\n// Para a criação ser aceita é necessário enviar dodos de:\n// nome, email, senha, cep, rua, numero, bairro, cidade e estado\n\n// Essa é a função utilizado para realizar o POST\n// fetch('https://ranekapi.origamid.dev/json/api/usuario', {\n//   method: 'POST',\n//   headers: {\n//     'Content-Type': 'application/json',\n//   },\n//   // form é o objeto com os dados do formulário\n//   body: JSON.stringify(form),\n// });\n\n// // Mostre uma mensagem na tela, caso a resposta da API seja positiva\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}