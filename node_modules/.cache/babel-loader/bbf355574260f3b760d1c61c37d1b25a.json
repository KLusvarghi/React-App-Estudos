{"ast":null,"code":"var _jsxFileName = \"C:\\\\Kaua-Lusvarghi\\\\Cursos-Programa\\xE7\\xE3o\\\\C\\xF3digo-Estudos\\\\Cursos_Programa\\xE7\\xE3o\\\\React\\\\React - Origamid\\\\Projeto-react-estudos\\\\appreact\\\\src\\\\Slide.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport styles from './Slide.module.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Slide = _ref => {\n  _s();\n\n  let {\n    slides\n  } = _ref;\n  const [active, setActive] = React.useState(0); // Reac=tivo respponsavel pelo item ativo na tela\n\n  const [position, setPositon] = React.useState(0);\n  const contentRef = React.useRef(); // hoock que terá uma referencia da div 'content'\n\n  React.useEffect(() => {\n    // pegando a posição inicial dele e tendo que pegar o tamanho do elemento, e não da tela\n    // para ter acesso direto ao elemento tem que passar a referencia (contentRef) junto com o .current (contentRef.current) \n    // e para pegar valores de posição desse elemento, peganto tanto a posição dele quanto o tamanho dele na tela 'contentRef.current.getBoundingClientRect()'\n    const {\n      width\n    } = contentRef.current.getBoundingClientRect(); // desestruturando o objeto que ele retorna e pegando apenas o width que me interessa, sendo a largura dele\n    // setPositon(position - width) // se eu passo assim, quando o site montar ele já irá ativar esse efeito logo de inicio, então podemos fazer outro calculo\n\n    console.log(position - width); // sendo o calculo: a posilçao que inicialmente é 0 e irá diminuindo, tendo um valor negativo e subtraindo com o 'width' que é o valor fixo da tela do usuário\n    // Snedo o calculo do calor fixo da tela * o active, que será dado ao clicar no botão aumentando +1 ou -1, negando tudo isso para que a movimentação seja correta\n\n    setPositon(-(width * active));\n  }, [active]); // quando o active sofre alteração ele realiza esse efeito\n\n  function slidePrev() {\n    if (active > 0) // fazendo uma verificação para que ele não diminua para uma quantidade que não existe\n      setActive(active - 1);\n  }\n\n  function slideNext() {\n    if (active < posi) setActive(active + 1);\n  } // para eu pegar o tamanho da tela eu posso usar o useRef e ter o valor da div 'content'\n\n\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    className: styles.container,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      ref: contentRef // assim tendo tendo referencia ao 'conten' com a variavel 'contentRef' \n      ,\n      className: styles.content,\n      style: {\n        transform: `translateX(${position}px)`\n      },\n      children: slides.map(_ref2 => {\n        let {\n          id,\n          text\n        } = _ref2;\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: styles.item,\n          children: text\n        }, id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 11\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"nav\", {\n      className: styles.nav,\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: slidePrev,\n        children: \"Anterior\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: slideNext,\n        children: \"Pr\\xF3ximo\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Slide, \"1DdcKMI4Ts9qhHMhZ5ePF4eWt/w=\");\n\n_c = Slide;\nexport default Slide;\n\nvar _c;\n\n$RefreshReg$(_c, \"Slide\");","map":{"version":3,"names":["React","styles","Slide","slides","active","setActive","useState","position","setPositon","contentRef","useRef","useEffect","width","current","getBoundingClientRect","console","log","slidePrev","slideNext","posi","container","content","transform","map","id","text","item","nav"],"sources":["C:/Kaua-Lusvarghi/Cursos-Programação/Código-Estudos/Cursos_Programação/React/React - Origamid/Projeto-react-estudos/appreact/src/Slide.js"],"sourcesContent":["import React from 'react';\r\nimport styles from './Slide.module.css';\r\n\r\nconst Slide = ({ slides }) => {\r\n  const [active, setActive] = React.useState(0) // Reac=tivo respponsavel pelo item ativo na tela\r\n  const [position, setPositon] = React.useState(0)\r\n  const contentRef = React.useRef() // hoock que terá uma referencia da div 'content'\r\n\r\n  React.useEffect(() => {\r\n    // pegando a posição inicial dele e tendo que pegar o tamanho do elemento, e não da tela\r\n    // para ter acesso direto ao elemento tem que passar a referencia (contentRef) junto com o .current (contentRef.current) \r\n    // e para pegar valores de posição desse elemento, peganto tanto a posição dele quanto o tamanho dele na tela 'contentRef.current.getBoundingClientRect()'\r\n    const {width} = contentRef.current.getBoundingClientRect() // desestruturando o objeto que ele retorna e pegando apenas o width que me interessa, sendo a largura dele\r\n\r\n\r\n    // setPositon(position - width) // se eu passo assim, quando o site montar ele já irá ativar esse efeito logo de inicio, então podemos fazer outro calculo\r\n    console.log(position - width) // sendo o calculo: a posilçao que inicialmente é 0 e irá diminuindo, tendo um valor negativo e subtraindo com o 'width' que é o valor fixo da tela do usuário\r\n  \r\n    // Snedo o calculo do calor fixo da tela * o active, que será dado ao clicar no botão aumentando +1 ou -1, negando tudo isso para que a movimentação seja correta\r\n    setPositon(-(width * active))\r\n\r\n\r\n  }, [active]) // quando o active sofre alteração ele realiza esse efeito\r\n\r\n  function slidePrev() {\r\n    if(active > 0) // fazendo uma verificação para que ele não diminua para uma quantidade que não existe\r\n    setActive(active - 1) \r\n  }\r\n\r\n  function slideNext() {\r\n    if(active < posi )\r\n    setActive(active + 1)\r\n  }\r\n\r\n  // para eu pegar o tamanho da tela eu posso usar o useRef e ter o valor da div 'content'\r\n\r\n  return (\r\n    <section className={styles.container}>\r\n      {/* O valor da transição é um numero que muda e que será feita baseando-se pelo tamanho da tela, então terá que ser ums useState */}\r\n      <div \r\n      ref={contentRef} // assim tendo tendo referencia ao 'conten' com a variavel 'contentRef' \r\n      className={styles.content} \r\n      style={{transform: `translateX(${position}px)`}}>\r\n        {slides.map(({ id, text }) => (\r\n          <div key={id} className={styles.item}>\r\n            {text}\r\n          </div>\r\n        ))}\r\n      </div>\r\n      <nav className={styles.nav}>\r\n        <button onClick={slidePrev}>Anterior</button>\r\n        <button onClick={slideNext}>Próximo</button>\r\n      </nav>\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default Slide;\r\n"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,MAAmB,oBAAnB;;;AAEA,MAAMC,KAAK,GAAG,QAAgB;EAAA;;EAAA,IAAf;IAAEC;EAAF,CAAe;EAC5B,MAAM,CAACC,MAAD,EAASC,SAAT,IAAsBL,KAAK,CAACM,QAAN,CAAe,CAAf,CAA5B,CAD4B,CACkB;;EAC9C,MAAM,CAACC,QAAD,EAAWC,UAAX,IAAyBR,KAAK,CAACM,QAAN,CAAe,CAAf,CAA/B;EACA,MAAMG,UAAU,GAAGT,KAAK,CAACU,MAAN,EAAnB,CAH4B,CAGM;;EAElCV,KAAK,CAACW,SAAN,CAAgB,MAAM;IACpB;IACA;IACA;IACA,MAAM;MAACC;IAAD,IAAUH,UAAU,CAACI,OAAX,CAAmBC,qBAAnB,EAAhB,CAJoB,CAIuC;IAG3D;;IACAC,OAAO,CAACC,GAAR,CAAYT,QAAQ,GAAGK,KAAvB,EARoB,CAQU;IAE9B;;IACAJ,UAAU,CAAC,EAAEI,KAAK,GAAGR,MAAV,CAAD,CAAV;EAGD,CAdD,EAcG,CAACA,MAAD,CAdH,EAL4B,CAmBf;;EAEb,SAASa,SAAT,GAAqB;IACnB,IAAGb,MAAM,GAAG,CAAZ,EAAe;MACfC,SAAS,CAACD,MAAM,GAAG,CAAV,CAAT;EACD;;EAED,SAASc,SAAT,GAAqB;IACnB,IAAGd,MAAM,GAAGe,IAAZ,EACAd,SAAS,CAACD,MAAM,GAAG,CAAV,CAAT;EACD,CA7B2B,CA+B5B;;;EAEA,oBACE;IAAS,SAAS,EAAEH,MAAM,CAACmB,SAA3B;IAAA,wBAEE;MACA,GAAG,EAAEX,UADL,CACiB;MADjB;MAEA,SAAS,EAAER,MAAM,CAACoB,OAFlB;MAGA,KAAK,EAAE;QAACC,SAAS,EAAG,cAAaf,QAAS;MAAnC,CAHP;MAAA,UAIGJ,MAAM,CAACoB,GAAP,CAAW;QAAA,IAAC;UAAEC,EAAF;UAAMC;QAAN,CAAD;QAAA,oBACV;UAAc,SAAS,EAAExB,MAAM,CAACyB,IAAhC;UAAA,UACGD;QADH,GAAUD,EAAV;UAAA;UAAA;UAAA;QAAA,QADU;MAAA,CAAX;IAJH;MAAA;MAAA;MAAA;IAAA,QAFF,eAYE;MAAK,SAAS,EAAEvB,MAAM,CAAC0B,GAAvB;MAAA,wBACE;QAAQ,OAAO,EAAEV,SAAjB;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QADF,eAEE;QAAQ,OAAO,EAAEC,SAAjB;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QAFF;IAAA;MAAA;MAAA;MAAA;IAAA,QAZF;EAAA;IAAA;IAAA;IAAA;EAAA,QADF;AAmBD,CApDD;;GAAMhB,K;;KAAAA,K;AAsDN,eAAeA,KAAf"},"metadata":{},"sourceType":"module"}