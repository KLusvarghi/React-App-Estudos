{"ast":null,"code":"var _jsxFileName = \"C:\\\\Kaua-Lusvarghi\\\\Cursos-Programa\\xE7\\xE3o\\\\C\\xF3digo-Estudos\\\\Cursos_Programa\\xE7\\xE3o\\\\React\\\\React - Origamid\\\\Projeto-react-estudos\\\\appreact\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst App = () => {\n  _s();\n\n  const [produto, setProduto] = React.useState('');\n\n  function handleChange(_ref) {\n    let {\n      target\n    } = _ref;\n    setProduto(target.value);\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      action: \"\",\n      children: [produto, /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [' ', /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"radio\" // name=\"produto\" // O que irá definir que os inputs do tipo radio são do mesmo grupo é o \"name\"\n          ,\n          checked: produto === 'smartphone' //ao invés de utilzar o 'name', podemos utilizar destá maneira tambem\n          //onChange={handleChange} // podendo passar uma função ou fazendo com uma função anonima tmabem\n          ,\n          onChange: _ref2 => {\n            let {\n              target\n            } = _ref2;\n            return setProduto(target.value);\n          },\n          value: \"smartphone\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 16,\n          columnNumber: 11\n        }, this), \"Smartphone\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 13,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [' ', /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"radio\" // name=\"produto\"\n          ,\n          checked: produto === 'notebook' //ao invés de utilzar o 'name', podemos utilizar destá maneira tambem\n          // onChange={handleChange}\n          ,\n          onChange: _ref3 => {\n            let {\n              target\n            } = _ref3;\n            return setProduto(target.value);\n          },\n          value: \"notebook\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 30,\n          columnNumber: 11\n        }, this), \"notebook\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n};\n\n_s(App, \"MugdDcK0KvO5m2qurxw4QdOtPZo=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","App","produto","setProduto","useState","handleChange","target","value"],"sources":["C:/Kaua-Lusvarghi/Cursos-Programação/Código-Estudos/Cursos_Programação/React/React - Origamid/Projeto-react-estudos/appreact/src/App.js"],"sourcesContent":["import React from 'react';\n\nconst App = () => {\n  const [produto, setProduto] = React.useState('');\n\n  function handleChange({ target }) {\n    setProduto(target.value);\n  }\n  return (\n    <>\n      <form action=\"\">\n        {produto}\n        <label>\n          {' '}\n          {/* Podendo utilizar o input dentro do label, e quando isso ocorre, podemos tirar o 'htmlFor' do falbel */}\n          <input\n            type=\"radio\"\n            // name=\"produto\" // O que irá definir que os inputs do tipo radio são do mesmo grupo é o \"name\"\n            checked={produto === 'smartphone'} //ao invés de utilzar o 'name', podemos utilizar destá maneira tambem\n            //onChange={handleChange} // podendo passar uma função ou fazendo com uma função anonima tmabem\n            onChange={({target}) => setProduto(target.value)}\n            value=\"smartphone\"\n          />\n          \n          Smartphone\n        </label>\n        <label>\n          {' '}\n          {/* Podendo utilizar o input dentro do label, e quando isso ocorre, podemos tirar o 'htmlFor' do falbel */}\n          <input\n            type=\"radio\"\n            // name=\"produto\"\n            checked={produto === 'notebook'} //ao invés de utilzar o 'name', podemos utilizar destá maneira tambem\n            // onChange={handleChange}\n            onChange={({target}) => setProduto(target.value)}\n\n            value=\"notebook\"\n          />\n          {/* O que irá definir que os inputs do tipo radio são do mesmo grupo é o \"name\" */}\n          notebook\n        </label>\n      </form>\n    </>\n  );\n};\n\nexport default App;\n"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;;;;AAEA,MAAMC,GAAG,GAAG,MAAM;EAAA;;EAChB,MAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBH,KAAK,CAACI,QAAN,CAAe,EAAf,CAA9B;;EAEA,SAASC,YAAT,OAAkC;IAAA,IAAZ;MAAEC;IAAF,CAAY;IAChCH,UAAU,CAACG,MAAM,CAACC,KAAR,CAAV;EACD;;EACD,oBACE;IAAA,uBACE;MAAM,MAAM,EAAC,EAAb;MAAA,WACGL,OADH,eAEE;QAAA,WACG,GADH,eAGE;UACE,IAAI,EAAC,OADP,CAEE;UAFF;UAGE,OAAO,EAAEA,OAAO,KAAK,YAHvB,CAGqC;UACnC;UAJF;UAKE,QAAQ,EAAE;YAAA,IAAC;cAACI;YAAD,CAAD;YAAA,OAAcH,UAAU,CAACG,MAAM,CAACC,KAAR,CAAxB;UAAA,CALZ;UAME,KAAK,EAAC;QANR;UAAA;UAAA;UAAA;QAAA,QAHF;MAAA;QAAA;QAAA;QAAA;MAAA,QAFF,eAgBE;QAAA,WACG,GADH,eAGE;UACE,IAAI,EAAC,OADP,CAEE;UAFF;UAGE,OAAO,EAAEL,OAAO,KAAK,UAHvB,CAGmC;UACjC;UAJF;UAKE,QAAQ,EAAE;YAAA,IAAC;cAACI;YAAD,CAAD;YAAA,OAAcH,UAAU,CAACG,MAAM,CAACC,KAAR,CAAxB;UAAA,CALZ;UAOE,KAAK,EAAC;QAPR;UAAA;UAAA;UAAA;QAAA,QAHF;MAAA;QAAA;QAAA;QAAA;MAAA,QAhBF;IAAA;MAAA;MAAA;MAAA;IAAA;EADF,iBADF;AAoCD,CA1CD;;GAAMN,G;;KAAAA,G;AA4CN,eAAeA,GAAf"},"metadata":{},"sourceType":"module"}