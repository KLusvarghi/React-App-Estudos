{"ast":null,"code":"var _jsxFileName = \"C:\\\\Kaua-Lusvarghi\\\\Cursos-Programa\\xE7\\xE3o\\\\C\\xF3digo-Estudos\\\\Cursos_Programa\\xE7\\xE3o\\\\React\\\\React - Origamid\\\\Projeto-react-estudos\\\\appreact\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst App = () => {\n  _s();\n\n  const [cores, setCores] = React.useState([]);\n\n  function handleChange(_ref) {\n    let {\n      target\n    } = _ref;\n\n    // console.log(target.value) // sendo os valores marcados e desmacados ao clicar\n    if (target.checked) {\n      // antes ele dava um bug que quando desmarcavamos o checkboox ele adicionava o valor a array, com essa verificação isso parou, porem ainda não removeu o item da array\n      setCores([...cores, target.value]); // passando a array, depois a array dos valores anteriores + o valor atual\n    } else {\n      // e para remover o valor desmarcado\n      // então eu quero pegar uma array, retornar ela sem um valor especifico, que é o 'target.value'\n      setCores(cores.filter(callback => {\n        // Passando um callback como retorno\n        console.log(callback); // sempre que eu desmarco um item ele aciona esse console.log com a cor desmarcada\n\n        return callback !== target.value; // se ele retornar isso quer dizer que ela não é a checada\n      }));\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"checkbox\",\n          value: \"azul\" // checked={box}\n          ,\n          onChange: handleChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 28,\n          columnNumber: 11\n        }, this), ' ', \"Azul\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"checkbox\",\n          value: \"vermehlo\" // checked={box}\n          ,\n          onChange: handleChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 11\n        }, this), ' ', \"Vermelho\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n};\n\n_s(App, \"2Qg+vKdm7xWUKyqOih7UQQnJS0g=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","App","cores","setCores","useState","handleChange","target","checked","value","filter","callback","console","log"],"sources":["C:/Kaua-Lusvarghi/Cursos-Programação/Código-Estudos/Cursos_Programação/React/React - Origamid/Projeto-react-estudos/appreact/src/App.js"],"sourcesContent":["import React from 'react';\n\nconst App = () => {\n  const [cores, setCores] = React.useState([]);\n\n  function handleChange({ target }) {\n    // console.log(target.value) // sendo os valores marcados e desmacados ao clicar\n    if (target.checked) {\n      // antes ele dava um bug que quando desmarcavamos o checkboox ele adicionava o valor a array, com essa verificação isso parou, porem ainda não removeu o item da array\n      setCores([...cores, target.value]); // passando a array, depois a array dos valores anteriores + o valor atual\n    } else {\n      // e para remover o valor desmarcado\n      // então eu quero pegar uma array, retornar ela sem um valor especifico, que é o 'target.value'\n      setCores(\n        cores.filter((callback) => {\n          // Passando um callback como retorno\n          console.log(callback); // sempre que eu desmarco um item ele aciona esse console.log com a cor desmarcada\n          return callback !== target.value; // se ele retornar isso quer dizer que ela não é a checada\n        }),\n      );\n    }\n  }\n\n  return (\n    <>\n      <form>\n        <label>\n          <input\n            type=\"checkbox\"\n            value=\"azul\"\n            // checked={box}\n            onChange={handleChange}\n          />{' '}\n          Azul\n        </label>\n        <label>\n          <input\n            type=\"checkbox\"\n            value=\"vermehlo\"\n            // checked={box}\n            onChange={handleChange}\n          />{' '}\n          Vermelho\n        </label>\n      </form>\n    </>\n  );\n};\n\nexport default App;\n"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;;;;AAEA,MAAMC,GAAG,GAAG,MAAM;EAAA;;EAChB,MAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBH,KAAK,CAACI,QAAN,CAAe,EAAf,CAA1B;;EAEA,SAASC,YAAT,OAAkC;IAAA,IAAZ;MAAEC;IAAF,CAAY;;IAChC;IACA,IAAIA,MAAM,CAACC,OAAX,EAAoB;MAClB;MACAJ,QAAQ,CAAC,CAAC,GAAGD,KAAJ,EAAWI,MAAM,CAACE,KAAlB,CAAD,CAAR,CAFkB,CAEkB;IACrC,CAHD,MAGO;MACL;MACA;MACAL,QAAQ,CACND,KAAK,CAACO,MAAN,CAAcC,QAAD,IAAc;QACzB;QACAC,OAAO,CAACC,GAAR,CAAYF,QAAZ,EAFyB,CAEF;;QACvB,OAAOA,QAAQ,KAAKJ,MAAM,CAACE,KAA3B,CAHyB,CAGS;MACnC,CAJD,CADM,CAAR;IAOD;EACF;;EAED,oBACE;IAAA,uBACE;MAAA,wBACE;QAAA,wBACE;UACE,IAAI,EAAC,UADP;UAEE,KAAK,EAAC,MAFR,CAGE;UAHF;UAIE,QAAQ,EAAEH;QAJZ;UAAA;UAAA;UAAA;QAAA,QADF,EAMK,GANL;MAAA;QAAA;QAAA;QAAA;MAAA,QADF,eAUE;QAAA,wBACE;UACE,IAAI,EAAC,UADP;UAEE,KAAK,EAAC,UAFR,CAGE;UAHF;UAIE,QAAQ,EAAEA;QAJZ;UAAA;UAAA;UAAA;QAAA,QADF,EAMK,GANL;MAAA;QAAA;QAAA;QAAA;MAAA,QAVF;IAAA;MAAA;MAAA;MAAA;IAAA;EADF,iBADF;AAwBD,CA7CD;;GAAMJ,G;;KAAAA,G;AA+CN,eAAeA,GAAf"},"metadata":{},"sourceType":"module"}