{"ast":null,"code":"var _jsxFileName = \"C:\\\\Kaua-Lusvarghi\\\\Cursos-Programa\\xE7\\xE3o\\\\C\\xF3digo-Estudos\\\\Cursos_Programa\\xE7\\xE3o\\\\React\\\\React - Origamid\\\\Projeto-react-estudos\\\\appreact\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst formFields = [{\n  id: 'nome',\n  label: 'Nome',\n  type: 'text'\n}, {\n  id: 'email',\n  label: 'Email',\n  type: 'email'\n}, {\n  id: 'senha',\n  label: 'Senha',\n  type: 'password'\n}];\n\nconst App = () => {\n  _s();\n\n  // nome, email, senha, cep, rua, numero, bairro, cidade e estado\n  const [form, setForm] = React.useState({\n    nome: '',\n    email: '',\n    senha: '',\n    cep: '',\n    rua: '',\n    numero: '',\n    bairro: '',\n    cidade: '',\n    estado: ''\n  });\n\n  function handleSubmit(e) {\n    e.preventDefault(); // previnindo o evento padrão para que ele não atualize a página\n  }\n\n  function handleChange(_ref) {\n    let {\n      target\n    } = _ref;\n    // desestruturando o 'event' e pegando apenas o que irei utilizar que é o 'target\n    const {\n      id,\n      value\n    } = target; // desestruturando o target e pegando o 'id' e o 'value'\n\n    console.log(id, value);\n    setForm({ ...form,\n      [id]: value\n    }); // passanod priemiro os valores antigos para ele não passar por cima\n    // [id]: value ===> essa parte é a mesma coisa que [\"email\"]: kaua@gmail.com\n    // caso não passe o 'id' entre [], ele não irá torar um itme reativo, ai só com os colchetes ele tranforma a variavel \"id\" como propriedade\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"nome\",\n        children: \"Nome\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        id: \"nome\",\n        name: \"nome\",\n        type: \"text\",\n        value: form.nome,\n        onChange: handleChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 9\n      }, this), formFields.map(_ref2 => {\n        let {\n          id,\n          label,\n          type\n        } = _ref2;\n\n        /*#__PURE__*/\n        _jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: id,\n            children: label\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 63,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: type,\n            id: id,\n            value: form[id] // sendo a mesma coisa que form[\"nome\"]\n            ,\n            onChange: handleChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 64,\n            columnNumber: 13\n          }, this)]\n        }, id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 11\n        }, this);\n      }), /*#__PURE__*/_jsxDEV(\"button\", {\n        children: \"Enviar\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n};\n\n_s(App, \"I6LH685KB1Xb1sJWOGwWFW1yBf8=\");\n\n_c = App;\nexport default App; // Faça um fetch (POST) para a API abaixo\n// Para a criação ser aceita é necessário enviar dodos de:\n// nome, email, senha, cep, rua, numero, bairro, cidade e estado\n// Essa é a função utilizado para realizar o POST\n// fetch('https://ranekapi.origamid.dev/json/api/usuario', {\n//   method: 'POST',\n//   headers: {\n//     'Content-Type': 'application/json',\n//   },\n//   // form é o objeto com os dados do formulário\n//   body: JSON.stringify(form),\n// });\n// // Mostre uma mensagem na tela, caso a resposta da API seja positiva\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","formFields","id","label","type","App","form","setForm","useState","nome","email","senha","cep","rua","numero","bairro","cidade","estado","handleSubmit","e","preventDefault","handleChange","target","value","console","log","map"],"sources":["C:/Kaua-Lusvarghi/Cursos-Programação/Código-Estudos/Cursos_Programação/React/React - Origamid/Projeto-react-estudos/appreact/src/App.js"],"sourcesContent":["import React from 'react';\n\nconst formFields = [\n  {\n    id: 'nome',\n    label: 'Nome',\n    type: 'text',\n  },\n  {\n    id: 'email',\n    label: 'Email',\n    type: 'email',\n  },\n  {\n    id: 'senha',\n    label: 'Senha',\n    type: 'password',\n  },\n];\n\nconst App = () => {\n  // nome, email, senha, cep, rua, numero, bairro, cidade e estado\n  const [form, setForm] = React.useState({\n    nome: '',\n    email: '',\n    senha: '',\n    cep: '',\n    rua: '',\n    numero: '',\n    bairro: '',\n    cidade: '',\n    estado: '',\n  });\n\n  function handleSubmit(e) {\n    e.preventDefault(); // previnindo o evento padrão para que ele não atualize a página\n  }\n\n  function handleChange({ target }) {\n    // desestruturando o 'event' e pegando apenas o que irei utilizar que é o 'target\n    const { id, value } = target; // desestruturando o target e pegando o 'id' e o 'value'\n    console.log(id, value);\n\n    setForm({ ...form, [id]: value }); // passanod priemiro os valores antigos para ele não passar por cima\n    // [id]: value ===> essa parte é a mesma coisa que [\"email\"]: kaua@gmail.com\n    // caso não passe o 'id' entre [], ele não irá torar um itme reativo, ai só com os colchetes ele tranforma a variavel \"id\" como propriedade\n  }\n\n  return (\n    <>\n      <form onSubmit={handleSubmit}>\n        <label htmlFor=\"nome\">Nome</label>\n        <input\n          id=\"nome\"\n          name=\"nome\"\n          type=\"text\"\n          value={form.nome}\n          onChange={handleChange}\n        />\n\n        {formFields.map(({ id, label, type }) => {\n          <div key={id}>\n            <label htmlFor={id}>{label}</label>\n            <input\n              type={type}\n              id={id}\n              value={form[id]} // sendo a mesma coisa que form[\"nome\"]\n              onChange={handleChange}\n            />\n          </div>;\n        })}\n\n        <button>Enviar</button>\n      </form>\n    </>\n  );\n};\n\nexport default App;\n\n// Faça um fetch (POST) para a API abaixo\n// Para a criação ser aceita é necessário enviar dodos de:\n// nome, email, senha, cep, rua, numero, bairro, cidade e estado\n\n// Essa é a função utilizado para realizar o POST\n// fetch('https://ranekapi.origamid.dev/json/api/usuario', {\n//   method: 'POST',\n//   headers: {\n//     'Content-Type': 'application/json',\n//   },\n//   // form é o objeto com os dados do formulário\n//   body: JSON.stringify(form),\n// });\n\n// // Mostre uma mensagem na tela, caso a resposta da API seja positiva\n"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;;;AAEA,MAAMC,UAAU,GAAG,CACjB;EACEC,EAAE,EAAE,MADN;EAEEC,KAAK,EAAE,MAFT;EAGEC,IAAI,EAAE;AAHR,CADiB,EAMjB;EACEF,EAAE,EAAE,OADN;EAEEC,KAAK,EAAE,OAFT;EAGEC,IAAI,EAAE;AAHR,CANiB,EAWjB;EACEF,EAAE,EAAE,OADN;EAEEC,KAAK,EAAE,OAFT;EAGEC,IAAI,EAAE;AAHR,CAXiB,CAAnB;;AAkBA,MAAMC,GAAG,GAAG,MAAM;EAAA;;EAChB;EACA,MAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBP,KAAK,CAACQ,QAAN,CAAe;IACrCC,IAAI,EAAE,EAD+B;IAErCC,KAAK,EAAE,EAF8B;IAGrCC,KAAK,EAAE,EAH8B;IAIrCC,GAAG,EAAE,EAJgC;IAKrCC,GAAG,EAAE,EALgC;IAMrCC,MAAM,EAAE,EAN6B;IAOrCC,MAAM,EAAE,EAP6B;IAQrCC,MAAM,EAAE,EAR6B;IASrCC,MAAM,EAAE;EAT6B,CAAf,CAAxB;;EAYA,SAASC,YAAT,CAAsBC,CAAtB,EAAyB;IACvBA,CAAC,CAACC,cAAF,GADuB,CACH;EACrB;;EAED,SAASC,YAAT,OAAkC;IAAA,IAAZ;MAAEC;IAAF,CAAY;IAChC;IACA,MAAM;MAAEpB,EAAF;MAAMqB;IAAN,IAAgBD,MAAtB,CAFgC,CAEF;;IAC9BE,OAAO,CAACC,GAAR,CAAYvB,EAAZ,EAAgBqB,KAAhB;IAEAhB,OAAO,CAAC,EAAE,GAAGD,IAAL;MAAW,CAACJ,EAAD,GAAMqB;IAAjB,CAAD,CAAP,CALgC,CAKG;IACnC;IACA;EACD;;EAED,oBACE;IAAA,uBACE;MAAM,QAAQ,EAAEL,YAAhB;MAAA,wBACE;QAAO,OAAO,EAAC,MAAf;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QADF,eAEE;QACE,EAAE,EAAC,MADL;QAEE,IAAI,EAAC,MAFP;QAGE,IAAI,EAAC,MAHP;QAIE,KAAK,EAAEZ,IAAI,CAACG,IAJd;QAKE,QAAQ,EAAEY;MALZ;QAAA;QAAA;QAAA;MAAA,QAFF,EAUGpB,UAAU,CAACyB,GAAX,CAAe,SAAyB;QAAA,IAAxB;UAAExB,EAAF;UAAMC,KAAN;UAAaC;QAAb,CAAwB;;QACvC;QAAA;UAAA,wBACE;YAAO,OAAO,EAAEF,EAAhB;YAAA,UAAqBC;UAArB;YAAA;YAAA;YAAA;UAAA,QADF,eAEE;YACE,IAAI,EAAEC,IADR;YAEE,EAAE,EAAEF,EAFN;YAGE,KAAK,EAAEI,IAAI,CAACJ,EAAD,CAHb,CAGmB;YAHnB;YAIE,QAAQ,EAAEmB;UAJZ;YAAA;YAAA;YAAA;UAAA,QAFF;QAAA,GAAUnB,EAAV;UAAA;UAAA;UAAA;QAAA;MASD,CAVA,CAVH,eAsBE;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QAtBF;IAAA;MAAA;MAAA;MAAA;IAAA;EADF,iBADF;AA4BD,CAxDD;;GAAMG,G;;KAAAA,G;AA0DN,eAAeA,GAAf,C,CAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA"},"metadata":{},"sourceType":"module"}