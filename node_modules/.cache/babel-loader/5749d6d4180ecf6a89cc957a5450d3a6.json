{"ast":null,"code":"var _jsxFileName = \"C:\\\\Kaua-Lusvarghi\\\\Cursos-Programa\\xE7\\xE3o\\\\C\\xF3digo-Estudos\\\\Cursos_Programa\\xE7\\xE3o\\\\React\\\\React - Origamid\\\\Projeto-react-estudos\\\\appreact\\\\src\\\\Form\\\\CheckBox.js\";\nimport React from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst CheckBox = _ref => {\n  let {\n    options,\n    value,\n    setValue,\n    ...props\n  } = _ref;\n\n  function handleChange(_ref2) {\n    let {\n      target\n    } = _ref2;\n\n    // console.log(target.value)\n    if (target.checked) {\n      // verifico se aoguma opção está checada\n      setValue([...value, target.value]); // passando todos os valores antigos com o spreed e depois passando o novo valor\n    } else {\n      // para remover o valor não checado da array caso tenha\n      setValue(value.filter(linguagem => linguagem !== target.value)); // apenas fazendo essa verificação ele irá filtar os valores (os 'itemValue') que são diferentes do 'target.value'  (que são os valores checados), estão todo 'itemValue' que é cada item/opção existente, que for diferente de um item checado (que pé o target.value), ele irá filtrar e retirar esse valores\n      // console.log(target.value);\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: options.map(option => /*#__PURE__*/_jsxDEV(\"label\", {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"checkbox\",\n        value: options,\n        id: option,\n        name: option,\n        checked: value.includes(option) // ele verifca se o value (que é a minha array com todos os valores), inclue o option (que é a opção passada aqui no map) \n        ,\n        onChange: handleChange,\n        ...props\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 11\n      }, this), option]\n    }, option, true, {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 9\n    }, this))\n  }, void 0, false);\n};\n\n_c = CheckBox;\nexport default CheckBox;\n\nvar _c;\n\n$RefreshReg$(_c, \"CheckBox\");","map":{"version":3,"names":["React","CheckBox","options","value","setValue","props","handleChange","target","checked","filter","linguagem","map","option","includes"],"sources":["C:/Kaua-Lusvarghi/Cursos-Programação/Código-Estudos/Cursos_Programação/React/React - Origamid/Projeto-react-estudos/appreact/src/Form/CheckBox.js"],"sourcesContent":["import React from 'react';\r\n\r\nconst CheckBox = ({ options, value, setValue, ...props }) => {\r\n\r\n  function handleChange({ target }) {\r\n    // console.log(target.value)\r\n    if (target.checked) {\r\n      // verifico se aoguma opção está checada\r\n      setValue([...value, target.value]) // passando todos os valores antigos com o spreed e depois passando o novo valor\r\n    } else {\r\n      // para remover o valor não checado da array caso tenha\r\n      setValue(value.filter((linguagem) => linguagem !== target.value)); // apenas fazendo essa verificação ele irá filtar os valores (os 'itemValue') que são diferentes do 'target.value'  (que são os valores checados), estão todo 'itemValue' que é cada item/opção existente, que for diferente de um item checado (que pé o target.value), ele irá filtrar e retirar esse valores\r\n      // console.log(target.value);\r\n    }\r\n  }\r\n\r\n  return (\r\n    <>\r\n      {options.map((option) => (\r\n        <label key={option}>\r\n          <input\r\n            type=\"checkbox\"\r\n            value={options}\r\n            id={option}\r\n            name={option}\r\n            checked={value.includes(option)}\r\n            // ele verifca se o value (que é a minha array com todos os valores), inclue o option (que é a opção passada aqui no map) \r\n            onChange={handleChange}\r\n            {...props}\r\n          />\r\n          {option}\r\n        </label>\r\n      ))}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default CheckBox;\r\n"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;;;;AAEA,MAAMC,QAAQ,GAAG,QAA4C;EAAA,IAA3C;IAAEC,OAAF;IAAWC,KAAX;IAAkBC,QAAlB;IAA4B,GAAGC;EAA/B,CAA2C;;EAE3D,SAASC,YAAT,QAAkC;IAAA,IAAZ;MAAEC;IAAF,CAAY;;IAChC;IACA,IAAIA,MAAM,CAACC,OAAX,EAAoB;MAClB;MACAJ,QAAQ,CAAC,CAAC,GAAGD,KAAJ,EAAWI,MAAM,CAACJ,KAAlB,CAAD,CAAR,CAFkB,CAEiB;IACpC,CAHD,MAGO;MACL;MACAC,QAAQ,CAACD,KAAK,CAACM,MAAN,CAAcC,SAAD,IAAeA,SAAS,KAAKH,MAAM,CAACJ,KAAjD,CAAD,CAAR,CAFK,CAE8D;MACnE;IACD;EACF;;EAED,oBACE;IAAA,UACGD,OAAO,CAACS,GAAR,CAAaC,MAAD,iBACX;MAAA,wBACE;QACE,IAAI,EAAC,UADP;QAEE,KAAK,EAAEV,OAFT;QAGE,EAAE,EAAEU,MAHN;QAIE,IAAI,EAAEA,MAJR;QAKE,OAAO,EAAET,KAAK,CAACU,QAAN,CAAeD,MAAf,CALX,CAME;QANF;QAOE,QAAQ,EAAEN,YAPZ;QAAA,GAQMD;MARN;QAAA;QAAA;QAAA;MAAA,QADF,EAWGO,MAXH;IAAA,GAAYA,MAAZ;MAAA;MAAA;MAAA;IAAA,QADD;EADH,iBADF;AAmBD,CAjCD;;KAAMX,Q;AAmCN,eAAeA,QAAf"},"metadata":{},"sourceType":"module"}